package com.example.thetimetracker

import android.app.DatePickerDialog
import android.content.Intent
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.widget.ArrayAdapter
import android.widget.Button
import android.widget.DatePicker
import android.widget.Spinner
import com.google.android.material.button.MaterialButton
import com.google.android.material.textfield.TextInputEditText
import com.google.android.material.textfield.TextInputLayout
import org.w3c.dom.Text
import java.util.*
import android.app.TimePickerDialog
import com.example.thetimetracker.Task
import com.example.thetimetracker.DatabaseHelper

class AddEntry : AppCompatActivity() {

    private lateinit var databaseHelper: DatabaseHelper

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_add_entry)

        databaseHelper = DatabaseHelper(this)

        val submitButton = findViewById<MaterialButton>(R.id.submitButton)

        val taskName = findViewById<TextInputEditText>(R.id.taskNameEditText)
        val description = findViewById<TextInputEditText>(R.id.descriptionEditText)

        val startTimeButton = findViewById<Button>(R.id.btnStartTime)
        val endTimeButton = findViewById<Button>(R.id.btnEndTime)
        val dateButton = findViewById<Button>(R.id.btnDate)
        val categorySpinner = findViewById<Spinner>(R.id.categorySpinner)

        // Create an ArrayAdapter using the string array and a default spinner layout
        val categories = arrayOf("Work", "Personal", "Health", "Study", "Errands", "Social")
        val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, categories)
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        categorySpinner.adapter = adapter

        // Set OnClickListener for the starttime button
        startTimeButton.setOnClickListener {
            showTimePickerDialog(startTimeButton)
        }
        // Set OnClickListener for the endtime button
        endTimeButton.setOnClickListener {
            showTimePickerDialog(endTimeButton)
        }
        // Set OnClickListener for the date button
        dateButton.setOnClickListener {
            showDatePickerDialog(dateButton)
        }

        submitButton.setOnClickListener {
            // Insert task into database
            val task = Task(
                0, // ID will be auto-generated by the database
                taskName.text.toString(),
                description.text.toString(),
                startTimeButton.text.toString(),
                endTimeButton.text.toString(),
                dateButton.text.toString(),
                categorySpinner.selectedItem.toString()
            )
            databaseHelper.insertTask(task)

            // Navigate back to EntriesMade activity
            val intent = Intent(this, EntriesMade::class.java)
            startActivity(intent)
            finish()
        }
    }

    // Function to show the time picker dialog
    private fun showTimePickerDialog(button: Button) {
        val currentTime = Calendar.getInstance()
        val hour = currentTime.get(Calendar.HOUR_OF_DAY)
        val minute = currentTime.get(Calendar.MINUTE)

        val timePickerDialog = TimePickerDialog(
            this,
            { _, selectedHour, selectedMinute ->
                // Set the selected time to the button text
                val formattedTime = String.format(Locale.getDefault(), "%02d:%02d", selectedHour, selectedMinute)
                button.text = formattedTime
            },
            hour,
            minute,
            true
        )
        timePickerDialog.show()
    }

    // Function to show the date picker dialog
    private fun showDatePickerDialog(button: Button) {
        val currentDate = Calendar.getInstance()
        val year = currentDate.get(Calendar.YEAR)
        val month = currentDate.get(Calendar.MONTH)
        val day = currentDate.get(Calendar.DAY_OF_MONTH)

        val datePickerDialog = DatePickerDialog(
            this,
            { _, selectedYear, selectedMonth, selectedDay ->
                // Set the selected date to the button text
                val formattedDate = "${selectedDay}/${selectedMonth + 1}/${selectedYear}"
                button.text = formattedDate
            },
            year,
            month,
            day
        )
        datePickerDialog.show()
    }
}